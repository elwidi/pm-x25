
<?php

class Administration_model extends CI_Model
{

    public function __construct()
    {
        parent::__construct();
    }

    public function setUserId()
    {
        $cookie = base64_decode($_COOKIE['SSOID']);
        $crop = explode('+', $cookie);
        return $crop[0];
    }

    public function getAllRole(){
        $this->db->select('*');
        $this->db->from('pm_role_master');
        $query = $this->db->get();
        $role = $query->result();
        return $role;
    }

    public function getRoleName($roleId){
        $this->db->select('*');
        $this->db->from('pm_role_master');
        $this->db->where('id', $roleId);
        $query = $this->db->get();
        $role = $query->row();
        return $role;
    }

    public function getPermissionbyRole($roleId){
        $this->db->select('id, permission_id, role_id, name');
        $this->db->from('pm_role_permission a');
        $this->db->join('pm_permission b', 'a.permission_id = b.id_permission');
        $this->db->where('role_id', $roleId);
        $query = $this->db->get();
        $result = $query->result();
        $permission = array();
        foreach($result as $key => $value){
            $permission[$value->name] = 1;
        }
        return $permission;
    }

    public function getUserRole($userId){
        $this->db->select('role_id, role_name');
        $this->db->from('pm_user a');
        $this->db->join('pm_role_master b', 'a.role_id = b.id');
        $this->db->where('sso_id', $userId);
        $query = $this->db->get();
        $role = $query->row();
        $r = array($role->role_id, $role->role_name);
        return $r;
    }

    /*public function getAccessRight()
    {
        $roleId = $this->getUserRole($this->setUserId());
        $this->db->select('user_id, role_id');
        $this->db->from('pm_role_permission');
        $this->db->where('role_id', $roleId);
        $this->db->where('p', $userId);
        $query = $this->db->get();
        $role = $query->row();
        return $role->role_id;
    }*/

    public function getPermissionByMenu($menu_id)
    {
        $this->db->from('pm_permission');
        $this->db->where('menu_id', $menu_id);
        $query = $this->db->get();
        $permission = $query->result();
        return $permission;
    }

    public function getMenuWithPermission($roleId){
        $this->db->select('id_menu, parent_id, name');
        $this->db->from('pm_menu');
        $this->db->where('parent_id',0);
        $query = $this->db->get();
        $role = $query->result();
        foreach($role as $key => $parent){
            $this->db->select('id_menu, parent_id, name');
            $this->db->from('pm_menu');
            $this->db->where('parent_id',$parent->id_menu);
            $query = $this->db->get();
            $menus = $query->result();
            foreach($menus as $i => $m){
                $permission = $this->getPermissionByMenu($m->id_menu);
                foreach($permission as $k => $p){
                    $rolePermission = $this->getPermissionbyRole($roleId);
                    $permission[$k]->havePermission = 0;
                    if(isset($rolePermission[$p->name])){
                        $permission[$k]->havePermission = 1;
                    }
                }

                $m->permission = $permission;

                $role[$key]->submenu[] = $m;
            }
        }
        return $role;
    }

    public function getActiveUser(){
        $this->db->select('*');
        $this->db->from('pm_user a');
        $this->db->where('active', 1);
        $query = $this->db->get();
        $user = $query->result();
        return $user;
    }

    public function getUserDetail($id){
        $this->db->select('a.*, b.role_name');
        $this->db->from('pm_user a');
        $this->db->join('pm_role_master b','a.role_id = b.id');
        $this->db->where('active', 1);
        $this->db->where('user_id', $id);
        $query = $this->db->get();
        $user = $query->row();
        return $user;
    }


    public function savePermission(){
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        $this->db->trans_begin();

        $data = array(
            'menu_id' => $this->input->post('menu'),
            'name' => $this->input->post('permission_name'),
            'description' => $this->input->post('description'),
            'created_by' => '3358',
            'created_at' => date("Y-m-d H:i:s")
        );

        $this->db->insert('pm_permission', $data);
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
        }
        else
        {
            $this->db->trans_commit();
        }

        return true;
    }

    public function getAllMenu(){
        $this->db->from('pm_menu');
        $this->db->where('status', 'active');
        $query = $this->db->get();
        return $query->result();
    }

    private function _get_datatable_role_query()
    {
//        $column_select = array("a.*", "b.name as menu_name");
        /*        $column_search = array("A.judul", "A.sales", "A.type_proposal");
                $column_order = array("A.id_proposal","A.judul", "A.sales", "A.type_proposal","A.create_date");*/
//        $this->db->select($column_select);
        $this->db->from('pm_role_master');
//        $this->db->join('pm_menu b', 'a.menu_id = b.id_menu', 'left');

        $i = 0;

        /*foreach ($column_search as $item) // loop column
        {
            if($_POST['search']['value']) // if datatable send POST for search
            {
                if(strtolower($_POST['search']['value']) == 'close' || strtolower($_POST['search']['value']) == 'closed'){
                    $this->db->where("B.proposal", 1);
                } elseif(strtolower($_POST['search']['value']) == 'progress' || strtolower($_POST['search']['value']) == 'progre'){
                    $this->db->where("B.proposal", 0);
                } else{
                    if($i===0) // first loop
                    {
                        $this->db->like($item, $_POST['search']['value']);
                    }
                    else
                    {
                        $this->db->or_like($item, $_POST['search']['value']);
                    }
                }


            }
            $i++;
        }*/

        /*$this->db->order_by("A.NAME_SALES", "asc");
        $this->db->order_by("A.TGL_INPUT", "desc");*/

        /*if(isset($_POST['order'])) // here order processing
        {
            $this->db->order_by($column_order[$_POST['order']['0']['column']], $_POST['order']['0']['dir']);
        }*/

    }

    function get_datatable_role()
    {
        $this->_get_datatable_role_query();
        if($_POST['length'] != -1)
            $this->db->limit($_POST['length'], $_POST['start']);
        $query = $this->db->get();
        return $query->result();
//		var_dump($query->result()); exit;
    }

    function count_filtered_role()
    {
        $this->_get_datatable_role_query();
        $query = $this->db->get();
        return $query->num_rows();
    }

    public function count_all_role()
    {
        $this->db->from("pm_role_master");
        return $this->db->count_all_results();
    }

    public function saveUser(){
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        $this->db->trans_begin();

        $user = $this->input->post('email');
        $user = explode('-',$user);

        $data = array(
            'sso_id' => $user[0],
            'email' => $user[1],
            'fullname' => $this->input->post('fullname'),
            'role_id' => $this->input->post('role'),
            'active' => 1
        );
        $this->db->insert('pm_user', $data);
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
        }
        else
        {
            $this->db->trans_commit();
        }

        return true;
    }

    function saveEditUser(){
//                var_dump($this->input->post(null, true)); exit;
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        $this->db->trans_begin();

        $user = $this->input->post('email');
        $user = explode('-',$user);

        $userId = $this->input->post('user_id');

        $data = array(
            'sso_id' => $user[0],
            'email' => $user[1],
            'fullname' => $this->input->post('fullname'),
            'role_id' => $this->input->post('role'),
//            'active' => 1
        );
        $this->db->where('user_id', $userId);
        $this->db->update('pm_user', $data);
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
        }
        else
        {
            $this->db->trans_commit();
        }

        return true;
    }

    private function _get_datatable_user_query()
    {
        $column_select = array("a.*", "b.role_name");
        $column_search = array("a.email", "a.fullname", "b.role_name");
        $column_order = array("a.email", "a.fullname", "b.role_name");
        $this->db->select($column_select);
        $this->db->from('pm_user a');
        $this->db->join('pm_role_master b', 'a.role_id = b.id');
        $i = 0;
        foreach ($column_search as $item) // loop column
        {
            if($_POST['search']['value']) // if datatable send POST for search
            {
                if($i===0) // first loop
                {
                    $this->db->like($item, $_POST['search']['value']);
                } else {
                    $this->db->or_like($item, $_POST['search']['value']);
                }
            }
            $i++;
        }

        if(isset($_POST['order'])) // here order processing
        {
            $this->db->order_by($column_order[$_POST['order']['0']['column']], $_POST['order']['0']['dir']);
        }

    }

    function get_datatable_user_permission()
    {
        $this->_get_datatable_user_query();
        if($_POST['length'] != -1)
            $this->db->limit($_POST['length'], $_POST['start']);
        $query = $this->db->get();
        return $query->result();
    }

    function count_filtered_user_permission()
    {
        $this->_get_datatable_user_query();
        $query = $this->db->get();
        return $query->num_rows();
    }

    public function count_all_user_permission()
    {
        $this->db->from("pm_user");
        return $this->db->count_all_results();
    }

    public function saveRolePermission(){
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        $this->db->trans_begin();

        $roleId = $this->input->post('role_id');

        $this->db->where('role_id', $roleId);
        $this->db->delete('pm_role_permission');

        $permission = $this->input->post(null, true);
        $permission = array_slice($permission,1);

        foreach($permission as $i => $k){
            $i = substr($i,1);
            $data = array(
                'role_id' => $roleId,
                'permission_id' => $i,
            );

            $this->db->insert('pm_role_permission', $data);
        }

        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
        }
        else
        {
            $this->db->trans_commit();
        }

        return true;
    }



}
?>