<?php
defined('BASEPATH') OR exit('No direct script access allowed');

include dirname(__FILE__).DIRECTORY_SEPARATOR.'SsoClient/ClientAPI.php';

class Implementation extends CI_Controller {

	/**
	 * Index Page for this controller.
	 *
	 * Maps to the following URL
	 * 		http://example.com/index.php/welcome
	 *	- or -
	 * 		http://example.com/index.php/welcome/index
	 *	- or -
	 * Since this controller is set as the default controller in
	 * config/routes.php, it's displayed at http://example.com/
	 *
	 * So any other public methods not prefixed with an underscore will
	 * map to /index.php/welcome/<method_name>
	 * @see https://codeigniter.com/user_guide/general/urls.html
	 */
	public function __construct()
	{
		parent::__construct();
		$this->load->model('Implementation_model', 'm_implement');

		//TODO: create an object and call a class method
		$ClientApi = new ClientAPI();
		$ClientApi->doCurl();
	}

	public function index()
	{
		// Get Apps Config
		$data = $this->apps->info();
		$data['page_title'] = '<span class="text-semibold">Implementation</span>';

		$this->load->view('implementation/implementation_view', $data);
	}

	public function progressTask()
	{
		// Get Apps Config
		$data = $this->apps->info();
		$data['page_title'] = '<span class="text-semibold">Implementation</span> - Progress Task';

		$this->load->view('implementation/progress_task_view', $data);
	}

	public function projectImplementationPlanXml()
	{
		$arr = array(
			'task' => array(
				'pID' => '10',
				'pName' => 'WCF Changes',
				'pStart' => '',
				'pEnd' => '',
				'pClass' => 'ggroupblack',
				'pLink' => '',
				'pMile' => '0',
				'pRes' => '',
				'pComp' => '0',
				'pGroup' => '1',
				'pParent' => '0',
				'pOpen' => '1',
				'pDepend' => ''
			)
		);
		$a = $this->assocArrayToXML('project',$arr);

		print $a;
	}

	public function assocArrayToXML($root_element_name,$ar)
	{
		$xml = new SimpleXMLElement("<?xml version=\"1.0\"?><$root_element_name></$root_element_name>");
		$f = create_function('$f,$c,$a','
            foreach($a as $k=>$v) {
                if(is_array($v)) {
                    $ch=$c->addChild($k);
                    $f($f,$ch,$v);
                } else {
                    $c->addChild($k,$v);
                }
            }');
		$f($f,$xml,$ar);
		return $xml->asXML();
	}


}
