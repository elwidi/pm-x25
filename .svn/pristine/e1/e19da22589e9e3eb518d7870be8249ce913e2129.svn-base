
<?php

class ToolManagement_model extends CI_Model {

    public function __construct()
    {
        parent::__construct();
    }

    public function setUserId()
    {
        $cookie = base64_decode($_COOKIE['SSOID']);
        $crop = explode('+', $cookie);
        return $crop[0];
    }

    public function getToolsDetail($id){
        $this->db->select('*');
        $this->db->from('pm_tools_inventory');
        $this->db->where('id', $id);
        $query = $this->db->get();
        $tools = $query->row();
        return $tools;
    }

    private function _get_datatable_tools_query()
    {
//        $column_select = array("");
//        $column_search = array("b.fullname", "c.position_title", "a.work_location");
//        $column_order = array("b.fullname", "c.position_title", "a.work_location");
        $this->db->select('*');
        $this->db->from('pm_tools_inventory');

        $i = 0;
       /* foreach ($column_search as $item) // loop column
        {
            if($_POST['search']['value']) // if datatable send POST for search
            {
                if($i===0) // first loop
                {
                    $this->db->like($item, $_POST['search']['value']);
                }
                else
                {
                    $this->db->or_like($item, $_POST['search']['value']);
                }
            }
            $i++;
        }

        if(isset($_POST['order'])) // here order processing
        {
            $this->db->order_by($column_order[$_POST['order']['0']['column']], $_POST['order']['0']['dir']);
        }*/

    }

    function get_datatable_tools()
    {
        $this->_get_datatable_tools_query();
        if($_POST['length'] != -1)
            $this->db->limit($_POST['length'], $_POST['start']);
        $query = $this->db->get();
        return $query->result();
    }

    function count_filtered_tools()
    {
        $this->_get_datatable_tools_query();
        $query = $this->db->get();
        return $query->num_rows();
    }

    public function count_all_tools()
    {
        $this->db->from("pm_tools_inventory");
        return $this->db->count_all_results();
    }

    public function saveNewTool(){
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        $this->db->trans_begin();

        $pr_date = null;
        $po_date = null;
        if(!empty($this->input->post('po_date'))){
            $po_date = date('Y-m-d H:i:s', strtotime($this->input->post('po_date')));
        }
        if(!empty($this->input->post('pr_date'))){
            $pr_date = date('Y-m-d H:i:s', strtotime($this->input->post('pr_date')));
        }
        $data = array(
            'tools_id' => $this->input->post('tools_id'),
            'description' => $this->input->post('description'),
            'pr_number' => $this->input->post('pr_number'),
            'po_number' => $this->input->post('po_number'),
            'pr_date' => $pr_date,
            'po_date' => $po_date,
            'brand' => $this->input->post('brand'),
            'type' => $this->input->post('type'),
            'serial_number' => $this->input->post('serial_number'),
            'warranty' => $this->input->post('waranty'),
            'position' => $this->input->post('current_area'),
            'price' => $this->input->post('price'),
            'condition' => $this->input->post('condition'),
            'new_rent' => $this->input->post('new'),
            'remarks' => $this->input->post('remarks'),
            'created_by' => $this->setUserId(),
            'created_date' => date('Y-m-d H:i:s')
        );
        $this->db->insert('pm_tools_inventory', $data);

        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
        }
        else
        {
            $this->db->trans_commit();
        }

        return true;
    }

    public function updateTool(){
        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        $this->db->trans_begin();

        $toolsId = $this->input->post('id_tool');

        $pr_date = null;
        $po_date = null;
        if(!empty($this->input->post('po_date'))){
            $po_date = date('Y-m-d H:i:s', strtotime($this->input->post('po_date')));
        }
        if(!empty($this->input->post('pr_date'))){
            $pr_date = date('Y-m-d H:i:s', strtotime($this->input->post('pr_date')));
        }

        $data = array(
            'tools_id' => $this->input->post('tools_id'),
            'description' => $this->input->post('description'),
            'pr_number' => $this->input->post('pr_number'),
            'po_number' => $this->input->post('po_number'),
            'pr_date' => $pr_date,
            'po_date' => $po_date,
            'brand' => $this->input->post('brand'),
            'type' => $this->input->post('type'),
            'serial_number' => $this->input->post('serial_number'),
            'warranty' => $this->input->post('waranty'),
            'position' => $this->input->post('current_area'),
            'price' => $this->input->post('price'),
            'condition' => $this->input->post('condition'),
            'new_rent' => $this->input->post('new'),
            'remarks' => $this->input->post('remarks'),
            'created_by' => $this->setUserId(),
            'created_date' => date('Y-m-d H:i:s')
        );
        $this->db->where('id', $toolsId);
        $this->db->update('pm_tools_inventory', $data);

        /**
         * ===================================================
         * Transactions with databases
         * ===================================================
         */
        if ($this->db->trans_status() === FALSE)
        {
            $this->db->trans_rollback();
        }
        else
        {
            $this->db->trans_commit();
        }

        return true;
    }

    public function deleteTool($id)
    {
        $this->db->delete('pm_tools_inventory', array('id' => $id)); 
    }


} 